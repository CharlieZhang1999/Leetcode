class Solution {
    
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length){
            return findMedian(nums2, nums1);
        }
        else return findMedian(nums1, nums2);
    }
    
    public double findMedian(int[] nums1, int[] nums2){
        int len1 = nums1.length, len2 = nums2.length;
        if(len1 == 0){
            if(len2 % 2 != 0){
                return nums2[(len2/2)];
            }
            else{
                return (double)(nums2[(len2/2)-1]+nums2[(len2/2)])/2;
            }
        }
        int half = (len1 + len2)/2;
        int left = 0, right = len1-1;
        int Aleft, Aright, Bleft, Bright;
        boolean iter = true;
        while(iter){
            int m1 = (int) Math.floor((double)(left + right)/2);
            int m2 = half - m1 - 2;
            Aleft = m1 >= 0?nums1[m1]:Integer.MIN_VALUE;
            Aright = (m1+1) < len1?nums1[m1+1]:Integer.MAX_VALUE;
            Bleft = m2 >= 0?nums2[m2]:Integer.MIN_VALUE;
            Bright = (m2+1) < len2?nums2[m2+1]:Integer.MAX_VALUE;
            if(Aleft <= Bright && Bleft <= Aright){
                if((len1 + len2) % 2 != 0){
                    return Math.min(Aright, Bright);
                }
                else{
                    return ((double)Math.max(Aleft, Bleft) + Math.min(Aright, Bright))/2;
                }
            }
            if(Aleft > Bright){
                right = m1-1;
            }
            else{
                left = m1 + 1;
            }
        }
        return 0;
    }
}
/*
#tag: binary search

1\注意顺序，一定要短的是num1，长的是num2
2\想到这道题就想到neetcode哥的那两个方框，以及Aleft, Aright, Bleft, Bright四个数的关系。这四个数唯有满足一定的关系的时候，才可以return。
*/